<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.flab.idolu.domain.order.repository.OrderRepository">

    <insert id="insertOrder" keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        INSERT INTO orders (member_id, recipient, phone, zip_code, address1, address2, order_status, total_price,
                            total_quantity, is_deleted, created_at, updated_at)
        VALUES (#{memberId}, #{recipient}, #{phone}, #{zipCode}, #{address1}, #{address2}, #{orderStatus},
                #{totalPrice}, #{totalQuantity}, false, NOW(), NOW())
    </insert>

    <insert id="insertOrderProduct">
        INSERT INTO order_product (order_id, product_id, price, quantity, created_at, updated_at)
        VALUES
        <foreach collection="list" item="orderProduct" separator=",">
            (#{orderProduct.orderId}, #{orderProduct.productId}, #{orderProduct.price},
             #{orderProduct.quantity}, NOW(), NOW())
        </foreach>
    </insert>

    <select id="findByMemberId" resultType="OrderListResponse">
        SELECT o.id,
               o.total_price,
               opt.product_count, -- 상품 구매 개수
               p.name,            -- 상위 1건 상품명
               o.order_status
        FROM orders o
                 JOIN (SELECT op.order_id,
                              MAX(op.product_id)   AS product_id,
                              COUNT(op.product_id) AS product_count
                       FROM order_product op
                       GROUP BY op.order_id) opt ON opt.order_id = o.id
                 JOIN product p ON p.id = opt.product_id
        WHERE o.member_id = #{memberId}
        ORDER BY o.id DESC
        LIMIT #{size}
        OFFSET #{offset}
    </select>

    <select id="findById" resultMap="orderAndPaymentAndOrderProducts">
        SELECT
            o.id,
            o.member_id,
            m.name AS member_name,
            o.recipient,
            o.zip_code,
            o.address1,
            o.address2,
            o.phone,
            o.order_status,
            o.total_price,
            o.total_quantity,
            o.created_at,
            p.payment_type,
            p.payment_status,
            op.product_id,
            op.price,
            op.quantity,
            pr.name AS product_name,
            pr.image_url
        FROM orders o
                 JOIN payment p ON p.order_id = o.id
                 JOIN member m ON m.id = o.member_id
                 JOIN order_product op ON op.order_id = o.id
                 JOIN product pr ON pr.id = op.product_id
        WHERE o.id = #{id};
    </select>
</mapper>